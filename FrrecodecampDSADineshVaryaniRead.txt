FREECODECAMP DSA DINESH VARYANI 200224 474616
---------------------------------------------
DSA JAVA WITH VISUALIZATIONS
----------------------------
SINGLY LINKED LIST

DOUBLY LINKED LIST

CIRCULAR LINKED LIST

ARRAYS

STACKS

QUEUES

BINARY TREE

BINARY HEAPS

GRAPHS

MATRIX

TRIES

and its IMPLEMENTATIONS (coding and algorithms)







Data Structures
---------------
it is a way to organize data

after organizing data it becomes easy to process it (Unorganized library books - cant find particular book)

organize the books in shelf 



Types of Data Structures
------------------------
        Linear (Data Elements arranged in sequential manner each element connected to its previous and next element)

        Non Linear (not in sequence)





Linear
------
Data Elements arranged in sequential manner each element connected to its previous and next element

sequential connection easy to traverse them

traversal is in single level

easy to implement because to store in sequential

        Array
        Linked List
        Stack
        Queue






Non Linear
----------
Data elements are non sequence

basically connected one another two different parts

stored in multilevel

traversal time is more and difficult

        Tree
        Graph








Introduction to Algorithms
--------------------------
an algorithm is a set of instructions to perform a task or to solve a given problem

a recipe book (set of instructions to cook recipe)

        boil water
        put tea in tea point
        add hot water
        put hot tea into tea cups
        add sugar
        stir drink and enjoy



print average of 3 given numbers

        perform sum of 3 numbers
        store into a variables
        divide the sum by 3
        store value in variable avg
        print 



package examples;

public class PrintfindAvg {
	public static void main(String[] args) {
		PrintfindAvg pf = new PrintfindAvg();
		pf.findAvg(10, 20, 30);
	}

	public void findAvg(int a, int b, int c) {
		int sum = a + b + c;
		int avg = sum / 3;
		System.out.println(avg);
	}
}






Analysis of Algorithm
---------------------
find best algorithm which runs fast and takes in less memory

        Time Complexity (How Much Time to Complete)

        Space Complexity (How Much Memory to Complete)



package examples;

public class PrintsumOfn {

	public static void main(String[] args) {
		PrintsumOfn sum = new PrintsumOfn();
		System.out.println(sum.findSumOne(20));
		System.out.println(sum.findSumTwo(20));
	}

	public int findSumOne(int n) {
		return n * (n + 1) / 2;
	}

	public int findSumTwo(int n) {
		int sum = 0;
		for (int i = 1; i <= n; i++) {
			sum = sum + i;
		}
		return sum;
	}
}

n no of loops TIme Complexity is More in this algorithm






Time Complexity
---------------
its amount of time taken by algorithm to run

the input processed by an algorithm helps in determining the time complexity





package examples;

public class PrintsumOfn {

	public static void main(String[] args) {
		long now = System.currentTimeMillis();
		
		PrintsumOfn sum = new PrintsumOfn();
		
		System.out.println(sum.findSumOne(9999));
		System.out.println("Time Taken - "+(System.currentTimeMillis() - now)+" millisecs");
		
		System.out.println(sum.findSumTwo(9999));
		System.out.println("Time Taken - "+(System.currentTimeMillis() - now)+" millisecs");
	}

	public int findSumOne(int n) {
		return n * (n + 1) / 2;
	}

	public int findSumTwo(int n) {
		int sum = 0;
		for (int i = 1; i <= n; i++) {
			sum = sum + i;
		}
		return sum;
	}
}







Space Complexity
-----------------
its amount of memory or space taken by algorithm to run

the memory required to process the input by an algorithm helps in determining the space complexity





Asymptotic Analysis of algorithm
--------------------------------
Asymptotic Analysis helps in evaluating performance of an algorithm in terms of input size and its increase

we don't measure actual running time of algorithm

it helps in determining how time and space taken by algorithm increases with input size








Asymptotic Notations
--------------------
Asymptotic Analysis helps us determining Run Time Complexity and Space Complexity of Given Algorithm

are the mathematical tools used to describe the running time of an algorithm in terms of input size

ex - performance of car in 1 litre of petrol

        Highway (min traffic) - 25 km/litre
        City (max traffic) - 15 km/litre
        City + Highway (avg traffic) - 20 km/litre




Asymptotic Notations helps us in determining

        Best Case
        Average Case
        Worst Case





Types of Asymptotic Notations
-----------------------------
There are Three Types of Notations

        Omega (Ω) Notation
        Big O (O) Notation
        Theta (θ) Notation



Omega (Ω) Notation
------------------
it is the formal way to express the lower bound of an algorithm running time

lower bound means for any given input this notation determines best amount of time an algorithm can take to complete

Ex - algorithm takes 100 secs best amount of time 



Big O (O) Notation
------------------
it is the formal way to express the upper bound of an algorithm running time

upper bound means for any given input this notation determines longest amount of time an algorithm can take to complete

Ex - algorithm takes 100 secs longest amount of time

opposite to Omega Notation

this is mostly used to find the max amount of time to take complete

Big O (O) Notation is the Worst Case Analysis of an Algorithm 







Theta (θ) Notation
------------------
it is the formal way to express the both lower bound and upper bound of an algorithm running time

determines average amount of time an algorithm can take to complete

Ex - 100 secs for first run
     120 secs for second run
     110 secs for third run 

it is rarely used because rare use cases to determine avg time









Analysis of Time Complexity (Big O Notation)
---------------------------------------------
it gives upper bound 

Rules
-----
it is a single processor

performs in sequential of statements

assignment operation takes 1 unit of time

return statement takes in 1 unit of time

arithmetical operation takes in 1 unit of time

logical operation takes in 1 unit of time

other small/single operation takes in 1 unit of time

drop lower order terms

        T = n2 + 3n + 1 = O(n2) 

        n - large (drop lower order terms - n2)


drop constant multipliers

        T = 3n2 + 6n + 1 = O(n2)





Calculating TIme Complexity of COnstant Algorithm
--------------------------------------------------

public int sum(int x,int y){
  int result = x + y;
  return result;
}


line no       operations          unit time

   2            1+1+1+1              4
   3              1+1                2


total time taken is 6 units

T = C (constant)







public int get(int[] arr,int){
  return arr[i];
}


Time Complexity O(1)









Calculating TIme Complexity of Linear Algorithm
-----------------------------------------------

public void findSum(int n){
	int sum = 0;
	for(int i-1;i<=n;i++){
		sum = sum+i;
	}
	return sum;
}





line no       operations          unit time

   2              1                  1
   3              1+3n+3+3n          6n+4
	 4              n(1+1+1+1)         4n
	 6              1+1                2




total time taken is 10n+7 units

T = 10n+7 (ignore lower order constant and constant)

T = n




Time Complexity = O(n)





Calculating TIme Complexity of Polynomial Algorithm
----------------------------------------------------

public void print(int n){
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			sop(i+j)
		}		
		sop(end inner loop)
	}
	sop(end outer loop)
}



line no       operations          unit time

   2              1+3(n+1)+3n        6n+4
   3              n(1+3n+3+3n)       6n2+4n
	 4              n2(1+1+1)          3n2
	 6              n(1)               n
	 8              1                  1



total time taken is 6n+4+6n2+4n+3n2+n+1 units

T = 9n2+11n+5 (ignore lower order constant and constant)

T = n2

Time Complexity = O(n2)








ARRAY DATA STRUCTURE
--------------------
Chocolate Box

all Chocolate holding partitions are adjacent or contiguous

each partition has two neighbors except first and last one

size of the box is fixed cant be modified

being adjacent each partition is indexed and can be determined by its position




arr[] = [5,9,3,10]
				 0 1 2  3



its a collection of data elements of specified type

all data holding partitions have contiguous memory locations

each partition have two neighbors except first and last one

size of array is fixed and cannot be modified once it is created

being adjacent each partition is indexed and can be determined by its position

index starts at 0 and for (one dimensional array) ends at length-1









Declaration and Initialization of an Array
------------------------------------------

One dimensional array can be declared 

				dataType arrayName[];

				dataType[] arrayName;


Ex - int myArray[];

		 		int[] myArray; (recommended)


Initialization of an Array
--------------------------
it gives memory to array elements one dimensional array can be initialized via syntax		 	

				arrayName = new dataType[size]; //fixed size array

Ex -    myArray = new int[5];



Declaration and Initialization
------------------------------
the array can be declared and initialized in same line via syntax

				dataType[] arrayName = new dataType[size]

				dataType arrayName[] = new dataType[size]



Ex -    int[] myArray = new int[5]; (recommended)

				int myArray[] = new int[5]


				int[] myArray = {5,4,3,2,6};




Adding or Updating elements in an Array
----------------------------------------
public void arrayDemo(){
	int[] myArray = new int[5];
	myArray[0]=5;
	myArray[1]=1;
	myArray[2]=8;
	myArray[3]=2;
	myArray[4]=10;
	myArray[2]=9;
	myArray[5]=7; //java.lang.ArrayIndexOutOfBoundsException:Index 5 out of bounds for length 5
}												








How to Print elements of an Array in Java
------------------------------------------
Animation of the Algorithm

package examples.array;

public class ArrayUtilTwo {
	
	public void printArray(int[] arr) {
		int n = arr.length;
		for(int i = 0;i<n;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		ArrayUtilTwo arrUtil = new ArrayUtilTwo();
		arrUtil.printArray(new int[] {5,1,2,9,10});
	}
}









Remove Even Integers from an Array
----------------------------------
input arr = {3,2,4,7,10,6,5}

output arr = {3,7,5}

package examples.array;

public class ArrayUtilRemoveEven {
	
	public static void printArray(int[] arr) {
		int n = arr.length;
		for(int i = 0;i<n;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
	}

	public static int[] removeEven(int[] arr) {
		int oddCount = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 != 0) {
				oddCount++;
			}
		}

		int[] result = new int[oddCount];
		int idx = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 != 0) {
				result[idx] = arr[i];
				idx++;
			}
		}
		return result;
	}

	public static void main(String[] args) {
//		ArrayUtilRemoveEven arrUtil = new ArrayUtilRemoveEven();
		
		int[] arr = {3,2,4,7,10,6,5};
		
		printArray(arr);
		
		int[] removeEven = removeEven(arr);
		
		printArray(removeEven);
	}
}






Reverse Array In Java
----------------------
input int[] arr = {2,11,5,10,7,8}

output int[] arr = {8,7,10,5,11,2}





package examples.array;

public class ArrayUtilReverseArray {

	public static void printArray(int[] arr) {
		int n = arr.length;
		for(int i = 0;i<n;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
	}
	

	public static void reverseArray(int[] numbers,int start,int end) {
	
		while(start < end) {
			int temp=numbers[start];
			numbers[start] = numbers[end];
			numbers[end]=temp;
			start++;
			end--;
		}
	}
	
	public static void main(String[] args) {
	
		int[] numbers = {2,11,5,10,7,8};
		printArray(numbers);
		reverseArray(numbers, 0, numbers.length-1);
		printArray(numbers);
		
	}
}







find minimum value of array
----------------------------
package examples.array;

public class ArrayUtilMinValue {

	public static void printArray(int[] arr) {
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
	
	public static int minValue(int[] arr) {
		int min = arr[0];
		for(int i=0;i<arr.length;i++) {
			if(arr[i]<min) {
				min = arr[i];
			}
		}
		return min;
	}
	
	public static void main(String[] args) {
		
		int[] arr = {17989511,224250,56433,5414444,554152,748586,774558,8124,9745844};
		printArray(arr);
		System.out.println(minValue(arr));
	}

}








find second max value in an array
---------------------------------
input arr = {12,34,2,34,33,1}

output = 33





package examples.array;

public class ArrayUtilSecondMaxValue {

	public static void printArray(int[] arr) {
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
	
	public static int findSecondMax(int[] arr) {
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		
		for(int i=0;i<arr.length;i++) {
			if(arr[i]>max) {
				secondMax = max;
				max = arr[i];
			}else if(arr[i]>secondMax && arr[i] != max) {
				secondMax = arr[i];
			}
		}
		return secondMax;
	}

	public static void main(String[] args) {
		int[] arr = {13,34,2,34,33,1};
		printArray(arr);
		System.out.println(findSecondMax(arr));

	}

}





move all zeros to end of an array
----------------------------------
arr[] = {0,1,0,4,12};

output {1,4,12,0,0}

package examples.array;

public class ArrayUtilMoveZeros {

	public static void printArray(int[] arr) {
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}

	public void moveZeros(int[] arr, int n) {
		int j = 0;
		for (int i = 0; i < n; i++) {
			if (arr[i] != 0 && arr[j] == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			if (arr[j] != 0) {
				j++;
			}
		}
	}

	public static void main(String[] args) {
		int[] arr = { 8, 1, 0, 2, 1, 0, 3 };
		printArray(arr);
		ArrayUtilMoveZeros moveZeros = new ArrayUtilMoveZeros();

		moveZeros.moveZeros(arr, arr.length);
		
		printArray(arr);
	}

}







how to resize an array
-----------------------
